(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{150:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),l=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=l.a.createContext({}),s=function(e){var n=l.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=s(e.components);return l.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},p=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),b=s(t),p=a,m=b["".concat(r,".").concat(p)]||b[p]||d[p]||i;return t?l.a.createElement(m,o(o({ref:n},u),{},{components:t})):l.a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var u=2;u<i;u++)r[u]=t[u];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var a=t(2),l=t(6),i=(t(0),t(150)),r={id:"select",title:"select",sidebar_label:"select"},o={unversionedId:"relational/sql/queries/select",id:"relational/sql/queries/select",isDocsHomePage:!1,title:"select",description:"Create a select query with the interface SelectSql that can be used with a Client to query the database.",source:"@site/docs/relational/sql/queries/select.md",slug:"/relational/sql/queries/select",permalink:"/docs/relational/sql/queries/select",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/relational/sql/queries/select.md",version:"current",sidebar_label:"select",sidebar:"someSidebar",previous:{title:"Client",permalink:"/docs/relational/client"},next:{title:"insert",permalink:"/docs/relational/sql/queries/insert"}},c=[{value:"Select",id:"select",children:[{value:"*",id:"",children:[]},{value:"table fields",id:"table-fields",children:[]},{value:"subselect field",id:"subselect-field",children:[]}]},{value:"From",id:"from",children:[{value:"table",id:"table",children:[]},{value:"table alias",id:"table-alias",children:[]},{value:"subselect",id:"subselect",children:[]}]},{value:"Join",id:"join",children:[{value:"table",id:"table-1",children:[]},{value:"table alias",id:"table-alias-1",children:[]}]},{value:"Where",id:"where",children:[{value:"equal",id:"equal",children:[]},{value:"notEqual",id:"notequal",children:[]},{value:"isNull",id:"isnull",children:[]},{value:"isNotNull",id:"isnotnull",children:[]},{value:"like",id:"like",children:[]},{value:"and",id:"and",children:[]},{value:"or",id:"or",children:[]}]},{value:"Having",id:"having",children:[]},{value:"Group by",id:"group-by",children:[]},{value:"Order by",id:"order-by",children:[]}],u={rightToc:c};function s(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Create a select query with the interface ",Object(i.b)("inlineCode",{parentName:"p"},"SelectSql<T>")," that can be used with a ",Object(i.b)("inlineCode",{parentName:"p"},"Client")," to query the database.\n",Object(i.b)("inlineCode",{parentName:"p"},"T")," represents the type of the expected result and is equal to the ",Object(i.b)("inlineCode",{parentName:"p"},"select")," property type.  "),Object(i.b)("h2",{id:"select"},"Select"),Object(i.b)("h3",{id:""},"*"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n}\n// SELECT * FROM Mountain\n")),Object(i.b)("h3",{id:"table-fields"},"table fields"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<{name: string, mountainHeight: number }> = {\n  select: {\n    name: field(Mountain, 'name'),\n    mountainHeight: field(Mountain, 'height'),\n  },\n  from: table(Mountain),\n}\n// SELECT Mountain.name, Mountain.height AS \"mountainHeight\" \n// FROM Mountain\n")),Object(i.b)("h3",{id:"subselect-field"},"subselect field"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<{ name: string, totalCount: number}> = {\n  select: {\n    name: field(Mountain, 'name'),\n    totalCount: subSelect({ select: count(), from: table(Mountain) }),\n  },\n  from: table(Mountain),\n}\n// SELECT Mountain.name, (SELECT count(*) FROM Mountain) AS \"totalCount\" \n// FROM Mountain\n")),Object(i.b)("h2",{id:"from"},"From"),Object(i.b)("h3",{id:"table"},"table"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// SELECT * FROM Mountain\nconst sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n}\n")),Object(i.b)("h3",{id:"table-alias"},"table alias"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(alias(Mountain, 'm')),\n  from: alias(Mountain, 'm'),\n}\n// SELECT m.* FROM Mountain AS m\n")),Object(i.b)("h3",{id:"subselect"},"subselect"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(),\n  from: subSelect({\n    select: [{\n      name: 'result'\n    }],\n  })\n}\n// SELECT * FROM (SELECT \"result\")\n")),Object(i.b)("h2",{id:"join"},"Join"),Object(i.b)("h3",{id:"table-1"},"table"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<{mountain: string, country: string}> = {\n  select: {\n    mountain: field(Mountain, 'name'),\n    country: field(Country, 'name'),\n  },\n  from: table(Mountain),\n  join: [\n    join(Country, equal(field(Mountain, 'countryId'), field(Country, 'id')))\n  ]\n}\n// SELECT Mountain.name AS \"mountain\", Country.name AS \"country\" \n// FROM Mountain \n// JOIN Country ON Mountain.countryId = Country.id\n")),Object(i.b)("h3",{id:"table-alias-1"},"table alias"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const parentTable = alias(Mountain, 'parent')\nconst sql: SelectSql<{mountain: string, parentMountain: string}> = {\n  select: {\n    mountain: field(Mountain, 'name'),\n    parentMountain: field(parentTable, 'name'),\n  },\n  from: table(Mountain),\n  join: [\n    join(parentTable, equal(field(parentTable, 'id'), field(Mountain, 'parentMountainId')))\n  ]\n}\n// SELECT Mountain.name AS \"mountain\", parent.name AS \"parentMountain\" \n// FROM Mountain \n// JOIN Mountain AS \"parent\" ON parent.id = Mountain.parentMountainId\n")),Object(i.b)("h2",{id:"where"},"Where"),Object(i.b)("h3",{id:"equal"},"equal"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n  where: equal(field(Mountain, 'name'), 'Matterhorn')\n}\n// SELECT Mountain.*\n// FROM Mountain \n// WHERE Mountain.name = 'Matterhorn'\n")),Object(i.b)("h3",{id:"notequal"},"notEqual"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n  where: notEqual(field(Mountain, 'name'), 'Matterhorn')\n}\n// SELECT Mountain.*\n// FROM Mountain \n// WHERE Mountain.name != 'Matterhorn'\n")),Object(i.b)("h3",{id:"isnull"},"isNull"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n  where: isNull(field(Mountain, 'name'))\n}\n// SELECT Mountain.*\n// FROM Mountain \n// WHERE Mountain.name IS NULL'\n")),Object(i.b)("h3",{id:"isnotnull"},"isNotNull"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n  where: isNotNull(field(Mountain, 'name'))\n}\n// SELECT Mountain.*\n// FROM Mountain \n// WHERE Mountain.name IS NOT NULL'\n")),Object(i.b)("h3",{id:"like"},"like"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n  where: like(field(Mountain, 'name'), 'Matter%')\n}\n// SELECT Mountain.*\n// FROM Mountain \n// WHERE Mountain.name LIKE 'Matter%'\n")),Object(i.b)("h3",{id:"and"},"and"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n  where: and(\n    notEqual(field(Mountain, 'name'), 'Matterhorn'),\n    notEqual(field(Mountain, 'name'), 'Pilatus')\n  )\n}\n// SELECT Mountain.*\n// FROM Mountain \n// WHERE (Mountain.name != 'Matterhorn' AND Mountain.name != Pilatus')\n")),Object(i.b)("h3",{id:"or"},"or"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const sql: SelectSql<Mountain> = {\n  select: all(Mountain),\n  from: table(Mountain),\n  where: or(\n    and(\n      notEqual(field(Mountain, 'name'), 'Matterhorn'),\n      notEqual(field(Mountain, 'name'), 'Pilatus')\n    ),\n    equal(field(Mountain, 'name'), 'Pilatus')\n  )\n}\n// SELECT Mountain.*\n// FROM Mountain \n// WHERE ((Mountain.name != 'Matterhorn' AND Mountain.name != Pilatus') OR Mountain.name = 'Pilatus') \n")),Object(i.b)("h2",{id:"having"},"Having"),Object(i.b)("h2",{id:"group-by"},"Group by"),Object(i.b)("h2",{id:"order-by"},"Order by"))}s.isMDXComponent=!0}}]);